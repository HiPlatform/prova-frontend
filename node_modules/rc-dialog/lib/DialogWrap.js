"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _PortalWrapper = _interopRequireDefault(require("rc-util/lib/PortalWrapper"));

var _Dialog = _interopRequireDefault(require("./Dialog"));

// fix issue #10656

/*
 * getContainer remarks
 * Custom container should not be return, because in the Portal component, it will remove the
 * return container element here, if the custom container is the only child of it's component,
 * like issue #10656, It will has a conflict with removeChild method in react-dom.
 * So here should add a child (div element) to custom container.
 * */
var _default = function _default(props) {
  var visible = props.visible,
      getContainer = props.getContainer,
      forceRender = props.forceRender; // 渲染在当前 dom 里；

  if (getContainer === false) {
    return React.createElement(_Dialog.default, Object.assign({}, props, {
      getOpenCount: function getOpenCount() {
        return 2;
      }
    }));
  }

  return React.createElement(_PortalWrapper.default, {
    visible: visible,
    forceRender: forceRender,
    getContainer: getContainer
  }, function (childProps) {
    return React.createElement(_Dialog.default, Object.assign({}, props, childProps));
  });
};

exports.default = _default;