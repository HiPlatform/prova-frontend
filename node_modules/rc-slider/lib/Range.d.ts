import React from 'react';
import { SliderProps } from './Slider';
export interface RangeProps {
    value?: number[];
    defaultValue?: number[];
    count?: number;
    min?: number;
    max?: number;
    allowCross?: boolean;
    pushable: boolean;
    onChange?: (value: number[]) => void;
    onBeforeChange?: (value: number[]) => void;
    onAfterChange?: (value: number[]) => void;
    reverse?: boolean;
    vertical?: boolean;
    marks?: Record<number, React.ReactNode | {
        style?: React.CSSProperties;
        label?: string;
    }>;
    step?: number;
    threshold?: number;
    prefixCls?: string;
    included?: boolean;
    disabled?: boolean;
    trackStyle?: React.CSSProperties;
    handleStyle?: React.CSSProperties;
    tabIndex?: number;
    ariaLabelGroupForHandles?: string;
    ariaLabelledByGroupForHandles?: string;
    ariaValueTextFormatterGroupForHandles?: string;
    handle: SliderProps['handle'];
}
declare const _default: {
    new (props: any): {
        [x: string]: any;
        componentDidMount(): void;
        componentWillUnmount(): void;
        onMouseDown: (e: any) => void;
        onTouchStart: (e: any) => void;
        onFocus: (e: any) => void;
        onBlur: (e: any) => void;
        onMouseUp: () => void;
        onMouseMove: (e: any) => void;
        onTouchMove: (e: any) => void;
        onKeyDown: (e: any) => void;
        onClickMarkLabel: (e: any, value: any) => void;
        getSliderStart(): any;
        getSliderLength(): any;
        addDocumentTouchEvents(): void;
        addDocumentMouseEvents(): void;
        removeDocumentEvents(): void;
        focus(): void;
        blur(): void;
        calcValue(offset: any): any;
        calcValueByPos(position: any): any;
        calcOffset(value: any): number;
        saveSlider: (slider: any) => void;
        saveHandle(index: any, handle: any): void;
        render(): JSX.Element;
    };
    [x: string]: any;
    displayName: string;
    defaultProps: any;
};
export default _default;
