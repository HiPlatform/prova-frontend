{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n/**\n * Handle virtual list of the TreeNodes.\n */\n\nimport * as React from 'react';\nimport VirtualList from 'rc-virtual-list';\nimport MotionTreeNode from './MotionTreeNode';\nimport { findExpandedKeys, getExpandRange } from './utils/diffUtil';\nimport { getTreeNodeProps, getKey } from './utils/treeUtil';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar noop = function noop() {};\n\nexport var MOTION_KEY = \"RC_TREE_MOTION_\".concat(Math.random());\nvar MotionNode = {\n  key: MOTION_KEY\n};\nexport var MotionEntity = {\n  key: MOTION_KEY,\n  level: 0,\n  index: 0,\n  pos: '0',\n  node: MotionNode\n};\nvar MotionFlattenData = {\n  parent: null,\n  children: [],\n  pos: MotionEntity.pos,\n  data: MotionNode,\n\n  /** Hold empty list here since we do not use it */\n  isStart: [],\n  isEnd: []\n};\n/**\n * We only need get visible content items to play the animation.\n */\n\nexport function getMinimumRangeTransitionRange(list, virtual, height, itemHeight) {\n  if (virtual === false || !height) {\n    return list;\n  }\n\n  return list.slice(0, Math.ceil(height / itemHeight) + 1);\n}\n\nfunction itemKey(item) {\n  var key = item.data.key,\n      pos = item.pos;\n  return getKey(key, pos);\n}\n\nfunction getAccessibilityPath(item) {\n  var path = String(item.data.key);\n  var current = item;\n\n  while (current.parent) {\n    current = current.parent;\n    path = \"\".concat(current.data.key, \" > \").concat(path);\n  }\n\n  return path;\n}\n\nvar RefNodeList = function RefNodeList(props, ref) {\n  var prefixCls = props.prefixCls,\n      data = props.data,\n      selectable = props.selectable,\n      checkable = props.checkable,\n      expandedKeys = props.expandedKeys,\n      selectedKeys = props.selectedKeys,\n      checkedKeys = props.checkedKeys,\n      loadedKeys = props.loadedKeys,\n      loadingKeys = props.loadingKeys,\n      halfCheckedKeys = props.halfCheckedKeys,\n      keyEntities = props.keyEntities,\n      disabled = props.disabled,\n      dragging = props.dragging,\n      dragOverNodeKey = props.dragOverNodeKey,\n      dropPosition = props.dropPosition,\n      motion = props.motion,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      virtual = props.virtual,\n      focusable = props.focusable,\n      activeItem = props.activeItem,\n      focused = props.focused,\n      tabIndex = props.tabIndex,\n      onKeyDown = props.onKeyDown,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onActiveChange = props.onActiveChange,\n      onListChangeStart = props.onListChangeStart,\n      onListChangeEnd = props.onListChangeEnd,\n      domProps = _objectWithoutProperties(props, [\"prefixCls\", \"data\", \"selectable\", \"checkable\", \"expandedKeys\", \"selectedKeys\", \"checkedKeys\", \"loadedKeys\", \"loadingKeys\", \"halfCheckedKeys\", \"keyEntities\", \"disabled\", \"dragging\", \"dragOverNodeKey\", \"dropPosition\", \"motion\", \"height\", \"itemHeight\", \"virtual\", \"focusable\", \"activeItem\", \"focused\", \"tabIndex\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onActiveChange\", \"onListChangeStart\", \"onListChangeEnd\"]); // =============================== Ref ================================\n\n\n  var listRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return {\n      scrollTo: function scrollTo(scroll) {\n        listRef.current.scrollTo(scroll);\n      }\n    };\n  }); // ============================== Motion ==============================\n\n  var _React$useState = React.useState(expandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      prevExpandedKeys = _React$useState2[0],\n      setPrevExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(data),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      prevData = _React$useState4[0],\n      setPrevData = _React$useState4[1];\n\n  var _React$useState5 = React.useState(data),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      transitionData = _React$useState6[0],\n      setTransitionData = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      transitionRange = _React$useState8[0],\n      setTransitionRange = _React$useState8[1];\n\n  var _React$useState9 = React.useState(null),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      motionType = _React$useState10[0],\n      setMotionType = _React$useState10[1];\n\n  function onMotionEnd() {\n    setPrevData(data);\n    setTransitionData(data);\n    setTransitionRange([]);\n    setMotionType(null);\n    onListChangeEnd();\n  } // Do animation if expanded keys changed\n\n\n  React.useEffect(function () {\n    setPrevExpandedKeys(expandedKeys);\n    var diffExpanded = findExpandedKeys(prevExpandedKeys, expandedKeys);\n\n    if (diffExpanded.key !== null) {\n      if (diffExpanded.add) {\n        var keyIndex = prevData.findIndex(function (_ref) {\n          var key = _ref.data.key;\n          return key === diffExpanded.key;\n        });\n        var rangeNodes = getMinimumRangeTransitionRange(getExpandRange(prevData, data, diffExpanded.key), virtual, height, itemHeight);\n        var newTransitionData = prevData.slice();\n        newTransitionData.splice(keyIndex + 1, 0, MotionFlattenData);\n        setTransitionData(newTransitionData);\n        setTransitionRange(rangeNodes);\n        setMotionType('show');\n      } else {\n        var _keyIndex = data.findIndex(function (_ref2) {\n          var key = _ref2.data.key;\n          return key === diffExpanded.key;\n        });\n\n        var _rangeNodes = getMinimumRangeTransitionRange(getExpandRange(data, prevData, diffExpanded.key), virtual, height, itemHeight);\n\n        var _newTransitionData = data.slice();\n\n        _newTransitionData.splice(_keyIndex + 1, 0, MotionFlattenData);\n\n        setTransitionData(_newTransitionData);\n        setTransitionRange(_rangeNodes);\n        setMotionType('hide');\n      }\n    } else if (prevData !== data) {\n      // If whole data changed, we just refresh the list\n      setPrevData(data);\n      setTransitionData(data);\n    }\n  }, [expandedKeys, data]); // We should clean up motion if is changed by dragging\n\n  React.useEffect(function () {\n    if (!dragging) {\n      onMotionEnd();\n    }\n  }, [dragging]);\n  var mergedData = motion ? transitionData : data;\n  var treeNodeRequiredProps = {\n    expandedKeys: expandedKeys,\n    selectedKeys: selectedKeys,\n    loadedKeys: loadedKeys,\n    loadingKeys: loadingKeys,\n    checkedKeys: checkedKeys,\n    halfCheckedKeys: halfCheckedKeys,\n    dragOverNodeKey: dragOverNodeKey,\n    dropPosition: dropPosition,\n    keyEntities: keyEntities\n  };\n  return React.createElement(React.Fragment, null, focused && activeItem && React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, getAccessibilityPath(activeItem)), React.createElement(\"div\", {\n    role: \"tree\"\n  }, React.createElement(\"input\", {\n    style: HIDDEN_STYLE,\n    disabled: focusable === false || disabled,\n    tabIndex: focusable !== false ? tabIndex : null,\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    value: \"\",\n    onChange: noop\n  })), React.createElement(VirtualList, Object.assign({}, domProps, {\n    data: mergedData,\n    itemKey: itemKey,\n    height: height,\n    fullHeight: false,\n    virtual: virtual,\n    itemHeight: itemHeight,\n    prefixCls: \"\".concat(prefixCls, \"-list\"),\n    ref: listRef\n  }), function (treeNode) {\n    var pos = treeNode.pos,\n        _treeNode$data = treeNode.data,\n        key = _treeNode$data.key,\n        restProps = _objectWithoutProperties(_treeNode$data, [\"key\"]),\n        isStart = treeNode.isStart,\n        isEnd = treeNode.isEnd;\n\n    var mergedKey = getKey(key, pos);\n    delete restProps.children;\n    var treeNodeProps = getTreeNodeProps(mergedKey, treeNodeRequiredProps);\n    return React.createElement(MotionTreeNode, Object.assign({}, restProps, treeNodeProps, {\n      active: activeItem && key === activeItem.data.key,\n      pos: pos,\n      data: treeNode.data,\n      isStart: isStart,\n      isEnd: isEnd,\n      motion: motion,\n      motionNodes: key === MOTION_KEY ? transitionRange : null,\n      motionType: motionType,\n      onMotionStart: onListChangeStart,\n      onMotionEnd: onMotionEnd,\n      treeNodeRequiredProps: treeNodeRequiredProps,\n      onMouseMove: function onMouseMove() {\n        onActiveChange(null);\n      }\n    }));\n  }));\n};\n\nvar NodeList = React.forwardRef(RefNodeList);\nNodeList.displayName = 'NodeList';\nexport default NodeList;","map":{"version":3,"sources":["/home/diegozago/Documents/hi-platform-test/node_modules/rc-tree/es/NodeList.js"],"names":["_slicedToArray","_objectWithoutProperties","React","VirtualList","MotionTreeNode","findExpandedKeys","getExpandRange","getTreeNodeProps","getKey","HIDDEN_STYLE","width","height","display","overflow","opacity","border","padding","margin","noop","MOTION_KEY","concat","Math","random","MotionNode","key","MotionEntity","level","index","pos","node","MotionFlattenData","parent","children","data","isStart","isEnd","getMinimumRangeTransitionRange","list","virtual","itemHeight","slice","ceil","itemKey","item","getAccessibilityPath","path","String","current","RefNodeList","props","ref","prefixCls","selectable","checkable","expandedKeys","selectedKeys","checkedKeys","loadedKeys","loadingKeys","halfCheckedKeys","keyEntities","disabled","dragging","dragOverNodeKey","dropPosition","motion","focusable","activeItem","focused","tabIndex","onKeyDown","onFocus","onBlur","onActiveChange","onListChangeStart","onListChangeEnd","domProps","listRef","useRef","useImperativeHandle","scrollTo","scroll","_React$useState","useState","_React$useState2","prevExpandedKeys","setPrevExpandedKeys","_React$useState3","_React$useState4","prevData","setPrevData","_React$useState5","_React$useState6","transitionData","setTransitionData","_React$useState7","_React$useState8","transitionRange","setTransitionRange","_React$useState9","_React$useState10","motionType","setMotionType","onMotionEnd","useEffect","diffExpanded","add","keyIndex","findIndex","_ref","rangeNodes","newTransitionData","splice","_keyIndex","_ref2","_rangeNodes","_newTransitionData","mergedData","treeNodeRequiredProps","createElement","Fragment","style","role","value","onChange","Object","assign","fullHeight","treeNode","_treeNode$data","restProps","mergedKey","treeNodeProps","active","motionNodes","onMotionStart","onMouseMove","NodeList","forwardRef","displayName"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\n/**\n * Handle virtual list of the TreeNodes.\n */\nimport * as React from 'react';\nimport VirtualList from 'rc-virtual-list';\nimport MotionTreeNode from './MotionTreeNode';\nimport { findExpandedKeys, getExpandRange } from './utils/diffUtil';\nimport { getTreeNodeProps, getKey } from './utils/treeUtil';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar noop = function noop() {};\n\nexport var MOTION_KEY = \"RC_TREE_MOTION_\".concat(Math.random());\nvar MotionNode = {\n  key: MOTION_KEY\n};\nexport var MotionEntity = {\n  key: MOTION_KEY,\n  level: 0,\n  index: 0,\n  pos: '0',\n  node: MotionNode\n};\nvar MotionFlattenData = {\n  parent: null,\n  children: [],\n  pos: MotionEntity.pos,\n  data: MotionNode,\n\n  /** Hold empty list here since we do not use it */\n  isStart: [],\n  isEnd: []\n};\n/**\n * We only need get visible content items to play the animation.\n */\n\nexport function getMinimumRangeTransitionRange(list, virtual, height, itemHeight) {\n  if (virtual === false || !height) {\n    return list;\n  }\n\n  return list.slice(0, Math.ceil(height / itemHeight) + 1);\n}\n\nfunction itemKey(item) {\n  var key = item.data.key,\n      pos = item.pos;\n  return getKey(key, pos);\n}\n\nfunction getAccessibilityPath(item) {\n  var path = String(item.data.key);\n  var current = item;\n\n  while (current.parent) {\n    current = current.parent;\n    path = \"\".concat(current.data.key, \" > \").concat(path);\n  }\n\n  return path;\n}\n\nvar RefNodeList = function RefNodeList(props, ref) {\n  var prefixCls = props.prefixCls,\n      data = props.data,\n      selectable = props.selectable,\n      checkable = props.checkable,\n      expandedKeys = props.expandedKeys,\n      selectedKeys = props.selectedKeys,\n      checkedKeys = props.checkedKeys,\n      loadedKeys = props.loadedKeys,\n      loadingKeys = props.loadingKeys,\n      halfCheckedKeys = props.halfCheckedKeys,\n      keyEntities = props.keyEntities,\n      disabled = props.disabled,\n      dragging = props.dragging,\n      dragOverNodeKey = props.dragOverNodeKey,\n      dropPosition = props.dropPosition,\n      motion = props.motion,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      virtual = props.virtual,\n      focusable = props.focusable,\n      activeItem = props.activeItem,\n      focused = props.focused,\n      tabIndex = props.tabIndex,\n      onKeyDown = props.onKeyDown,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      onActiveChange = props.onActiveChange,\n      onListChangeStart = props.onListChangeStart,\n      onListChangeEnd = props.onListChangeEnd,\n      domProps = _objectWithoutProperties(props, [\"prefixCls\", \"data\", \"selectable\", \"checkable\", \"expandedKeys\", \"selectedKeys\", \"checkedKeys\", \"loadedKeys\", \"loadingKeys\", \"halfCheckedKeys\", \"keyEntities\", \"disabled\", \"dragging\", \"dragOverNodeKey\", \"dropPosition\", \"motion\", \"height\", \"itemHeight\", \"virtual\", \"focusable\", \"activeItem\", \"focused\", \"tabIndex\", \"onKeyDown\", \"onFocus\", \"onBlur\", \"onActiveChange\", \"onListChangeStart\", \"onListChangeEnd\"]); // =============================== Ref ================================\n\n\n  var listRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return {\n      scrollTo: function scrollTo(scroll) {\n        listRef.current.scrollTo(scroll);\n      }\n    };\n  }); // ============================== Motion ==============================\n\n  var _React$useState = React.useState(expandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      prevExpandedKeys = _React$useState2[0],\n      setPrevExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(data),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      prevData = _React$useState4[0],\n      setPrevData = _React$useState4[1];\n\n  var _React$useState5 = React.useState(data),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      transitionData = _React$useState6[0],\n      setTransitionData = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      transitionRange = _React$useState8[0],\n      setTransitionRange = _React$useState8[1];\n\n  var _React$useState9 = React.useState(null),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      motionType = _React$useState10[0],\n      setMotionType = _React$useState10[1];\n\n  function onMotionEnd() {\n    setPrevData(data);\n    setTransitionData(data);\n    setTransitionRange([]);\n    setMotionType(null);\n    onListChangeEnd();\n  } // Do animation if expanded keys changed\n\n\n  React.useEffect(function () {\n    setPrevExpandedKeys(expandedKeys);\n    var diffExpanded = findExpandedKeys(prevExpandedKeys, expandedKeys);\n\n    if (diffExpanded.key !== null) {\n      if (diffExpanded.add) {\n        var keyIndex = prevData.findIndex(function (_ref) {\n          var key = _ref.data.key;\n          return key === diffExpanded.key;\n        });\n        var rangeNodes = getMinimumRangeTransitionRange(getExpandRange(prevData, data, diffExpanded.key), virtual, height, itemHeight);\n        var newTransitionData = prevData.slice();\n        newTransitionData.splice(keyIndex + 1, 0, MotionFlattenData);\n        setTransitionData(newTransitionData);\n        setTransitionRange(rangeNodes);\n        setMotionType('show');\n      } else {\n        var _keyIndex = data.findIndex(function (_ref2) {\n          var key = _ref2.data.key;\n          return key === diffExpanded.key;\n        });\n\n        var _rangeNodes = getMinimumRangeTransitionRange(getExpandRange(data, prevData, diffExpanded.key), virtual, height, itemHeight);\n\n        var _newTransitionData = data.slice();\n\n        _newTransitionData.splice(_keyIndex + 1, 0, MotionFlattenData);\n\n        setTransitionData(_newTransitionData);\n        setTransitionRange(_rangeNodes);\n        setMotionType('hide');\n      }\n    } else if (prevData !== data) {\n      // If whole data changed, we just refresh the list\n      setPrevData(data);\n      setTransitionData(data);\n    }\n  }, [expandedKeys, data]); // We should clean up motion if is changed by dragging\n\n  React.useEffect(function () {\n    if (!dragging) {\n      onMotionEnd();\n    }\n  }, [dragging]);\n  var mergedData = motion ? transitionData : data;\n  var treeNodeRequiredProps = {\n    expandedKeys: expandedKeys,\n    selectedKeys: selectedKeys,\n    loadedKeys: loadedKeys,\n    loadingKeys: loadingKeys,\n    checkedKeys: checkedKeys,\n    halfCheckedKeys: halfCheckedKeys,\n    dragOverNodeKey: dragOverNodeKey,\n    dropPosition: dropPosition,\n    keyEntities: keyEntities\n  };\n  return React.createElement(React.Fragment, null, focused && activeItem && React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, getAccessibilityPath(activeItem)), React.createElement(\"div\", {\n    role: \"tree\"\n  }, React.createElement(\"input\", {\n    style: HIDDEN_STYLE,\n    disabled: focusable === false || disabled,\n    tabIndex: focusable !== false ? tabIndex : null,\n    onKeyDown: onKeyDown,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    value: \"\",\n    onChange: noop\n  })), React.createElement(VirtualList, Object.assign({}, domProps, {\n    data: mergedData,\n    itemKey: itemKey,\n    height: height,\n    fullHeight: false,\n    virtual: virtual,\n    itemHeight: itemHeight,\n    prefixCls: \"\".concat(prefixCls, \"-list\"),\n    ref: listRef\n  }), function (treeNode) {\n    var pos = treeNode.pos,\n        _treeNode$data = treeNode.data,\n        key = _treeNode$data.key,\n        restProps = _objectWithoutProperties(_treeNode$data, [\"key\"]),\n        isStart = treeNode.isStart,\n        isEnd = treeNode.isEnd;\n\n    var mergedKey = getKey(key, pos);\n    delete restProps.children;\n    var treeNodeProps = getTreeNodeProps(mergedKey, treeNodeRequiredProps);\n    return React.createElement(MotionTreeNode, Object.assign({}, restProps, treeNodeProps, {\n      active: activeItem && key === activeItem.data.key,\n      pos: pos,\n      data: treeNode.data,\n      isStart: isStart,\n      isEnd: isEnd,\n      motion: motion,\n      motionNodes: key === MOTION_KEY ? transitionRange : null,\n      motionType: motionType,\n      onMotionStart: onListChangeStart,\n      onMotionEnd: onMotionEnd,\n      treeNodeRequiredProps: treeNodeRequiredProps,\n      onMouseMove: function onMouseMove() {\n        onActiveChange(null);\n      }\n    }));\n  }));\n};\n\nvar NodeList = React.forwardRef(RefNodeList);\nNodeList.displayName = 'NodeList';\nexport default NodeList;"]},"metadata":{},"sourceType":"module"}