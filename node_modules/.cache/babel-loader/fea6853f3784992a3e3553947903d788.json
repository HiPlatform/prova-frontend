{"ast":null,"code":"import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport FieldContext from './FieldContext';\nimport Field from './Field';\nimport { move as _move, getNamePath } from './utils/valueUtil';\n\nvar List = function List(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  var context = React.useContext(FieldContext);\n  var keyRef = React.useRef({\n    keys: [],\n    id: 0\n  });\n  var keyManager = keyRef.current; // User should not pass `children` as other type.\n\n  if (typeof children !== 'function') {\n    warning(false, 'Form.List only accepts function as children.');\n    return null;\n  }\n\n  var parentPrefixName = getNamePath(context.prefixName) || [];\n  var prefixName = [].concat(_toConsumableArray(parentPrefixName), _toConsumableArray(getNamePath(name)));\n\n  var shouldUpdate = function shouldUpdate(prevValue, nextValue, _ref2) {\n    var source = _ref2.source;\n\n    if (source === 'internal') {\n      return false;\n    }\n\n    return prevValue !== nextValue;\n  };\n\n  return React.createElement(FieldContext.Provider, {\n    value: _objectSpread(_objectSpread({}, context), {}, {\n      prefixName: prefixName\n    })\n  }, React.createElement(Field, {\n    name: [],\n    shouldUpdate: shouldUpdate\n  }, function (_ref3) {\n    var _ref3$value = _ref3.value,\n        value = _ref3$value === void 0 ? [] : _ref3$value,\n        onChange = _ref3.onChange;\n    var getFieldValue = context.getFieldValue;\n\n    var getNewValue = function getNewValue() {\n      var values = getFieldValue(prefixName || []);\n      return values || [];\n    };\n    /**\n     * Always get latest value in case user update fields by `form` api.\n     */\n\n\n    var operations = {\n      add: function add(defaultValue, index) {\n        // Mapping keys\n        var newValue = getNewValue();\n\n        if (index >= 0 && index <= newValue.length) {\n          keyManager.keys = [].concat(_toConsumableArray(keyManager.keys.slice(0, index)), [keyManager.id], _toConsumableArray(keyManager.keys.slice(index)));\n          onChange([].concat(_toConsumableArray(newValue.slice(0, index)), [defaultValue], _toConsumableArray(newValue.slice(index))));\n        } else {\n          if (process.env.NODE_ENV !== 'production' && (index < 0 || index > newValue.length)) {\n            warning(false, 'The second parameter of the add function should be a valid positive number.');\n          }\n\n          keyManager.keys = [].concat(_toConsumableArray(keyManager.keys), [keyManager.id]);\n          onChange([].concat(_toConsumableArray(newValue), [defaultValue]));\n        }\n\n        keyManager.id += 1;\n      },\n      remove: function remove(index) {\n        var newValue = getNewValue();\n        var indexSet = new Set(Array.isArray(index) ? index : [index]);\n\n        if (indexSet.size <= 0) {\n          return;\n        }\n\n        keyManager.keys = keyManager.keys.filter(function (_, keysIndex) {\n          return !indexSet.has(keysIndex);\n        }); // Trigger store change\n\n        onChange(newValue.filter(function (_, valueIndex) {\n          return !indexSet.has(valueIndex);\n        }));\n      },\n      move: function move(from, to) {\n        if (from === to) {\n          return;\n        }\n\n        var newValue = getNewValue(); // Do not handle out of range\n\n        if (from < 0 || from >= newValue.length || to < 0 || to >= newValue.length) {\n          return;\n        }\n\n        keyManager.keys = _move(keyManager.keys, from, to); // Trigger store change\n\n        onChange(_move(newValue, from, to));\n      }\n    };\n    var listValue = value || [];\n\n    if (!Array.isArray(listValue)) {\n      listValue = [];\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(false, \"Current value of '\".concat(prefixName.join(' > '), \"' is not an array type.\"));\n      }\n    }\n\n    return children(listValue.map(function (__, index) {\n      var key = keyManager.keys[index];\n\n      if (key === undefined) {\n        keyManager.keys[index] = keyManager.id;\n        key = keyManager.keys[index];\n        keyManager.id += 1;\n      }\n\n      return {\n        name: index,\n        key: key,\n        isListField: true\n      };\n    }), operations);\n  }));\n};\n\nexport default List;","map":{"version":3,"sources":["/home/diegozago/Documents/hi-platform-test/node_modules/rc-field-form/es/List.js"],"names":["_objectSpread","_toConsumableArray","React","warning","FieldContext","Field","move","_move","getNamePath","List","_ref","name","children","context","useContext","keyRef","useRef","keys","id","keyManager","current","parentPrefixName","prefixName","concat","shouldUpdate","prevValue","nextValue","_ref2","source","createElement","Provider","value","_ref3","_ref3$value","onChange","getFieldValue","getNewValue","values","operations","add","defaultValue","index","newValue","length","slice","process","env","NODE_ENV","remove","indexSet","Set","Array","isArray","size","filter","_","keysIndex","has","valueIndex","from","to","listValue","join","map","__","key","undefined","isListField"],"mappings":"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","sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport FieldContext from './FieldContext';\nimport Field from './Field';\nimport { move as _move, getNamePath } from './utils/valueUtil';\n\nvar List = function List(_ref) {\n  var name = _ref.name,\n      children = _ref.children;\n  var context = React.useContext(FieldContext);\n  var keyRef = React.useRef({\n    keys: [],\n    id: 0\n  });\n  var keyManager = keyRef.current; // User should not pass `children` as other type.\n\n  if (typeof children !== 'function') {\n    warning(false, 'Form.List only accepts function as children.');\n    return null;\n  }\n\n  var parentPrefixName = getNamePath(context.prefixName) || [];\n  var prefixName = [].concat(_toConsumableArray(parentPrefixName), _toConsumableArray(getNamePath(name)));\n\n  var shouldUpdate = function shouldUpdate(prevValue, nextValue, _ref2) {\n    var source = _ref2.source;\n\n    if (source === 'internal') {\n      return false;\n    }\n\n    return prevValue !== nextValue;\n  };\n\n  return React.createElement(FieldContext.Provider, {\n    value: _objectSpread(_objectSpread({}, context), {}, {\n      prefixName: prefixName\n    })\n  }, React.createElement(Field, {\n    name: [],\n    shouldUpdate: shouldUpdate\n  }, function (_ref3) {\n    var _ref3$value = _ref3.value,\n        value = _ref3$value === void 0 ? [] : _ref3$value,\n        onChange = _ref3.onChange;\n    var getFieldValue = context.getFieldValue;\n\n    var getNewValue = function getNewValue() {\n      var values = getFieldValue(prefixName || []);\n      return values || [];\n    };\n    /**\n     * Always get latest value in case user update fields by `form` api.\n     */\n\n\n    var operations = {\n      add: function add(defaultValue, index) {\n        // Mapping keys\n        var newValue = getNewValue();\n\n        if (index >= 0 && index <= newValue.length) {\n          keyManager.keys = [].concat(_toConsumableArray(keyManager.keys.slice(0, index)), [keyManager.id], _toConsumableArray(keyManager.keys.slice(index)));\n          onChange([].concat(_toConsumableArray(newValue.slice(0, index)), [defaultValue], _toConsumableArray(newValue.slice(index))));\n        } else {\n          if (process.env.NODE_ENV !== 'production' && (index < 0 || index > newValue.length)) {\n            warning(false, 'The second parameter of the add function should be a valid positive number.');\n          }\n\n          keyManager.keys = [].concat(_toConsumableArray(keyManager.keys), [keyManager.id]);\n          onChange([].concat(_toConsumableArray(newValue), [defaultValue]));\n        }\n\n        keyManager.id += 1;\n      },\n      remove: function remove(index) {\n        var newValue = getNewValue();\n        var indexSet = new Set(Array.isArray(index) ? index : [index]);\n\n        if (indexSet.size <= 0) {\n          return;\n        }\n\n        keyManager.keys = keyManager.keys.filter(function (_, keysIndex) {\n          return !indexSet.has(keysIndex);\n        }); // Trigger store change\n\n        onChange(newValue.filter(function (_, valueIndex) {\n          return !indexSet.has(valueIndex);\n        }));\n      },\n      move: function move(from, to) {\n        if (from === to) {\n          return;\n        }\n\n        var newValue = getNewValue(); // Do not handle out of range\n\n        if (from < 0 || from >= newValue.length || to < 0 || to >= newValue.length) {\n          return;\n        }\n\n        keyManager.keys = _move(keyManager.keys, from, to); // Trigger store change\n\n        onChange(_move(newValue, from, to));\n      }\n    };\n    var listValue = value || [];\n\n    if (!Array.isArray(listValue)) {\n      listValue = [];\n\n      if (process.env.NODE_ENV !== 'production') {\n        warning(false, \"Current value of '\".concat(prefixName.join(' > '), \"' is not an array type.\"));\n      }\n    }\n\n    return children(listValue.map(function (__, index) {\n      var key = keyManager.keys[index];\n\n      if (key === undefined) {\n        keyManager.keys[index] = keyManager.id;\n        key = keyManager.keys[index];\n        keyManager.id += 1;\n      }\n\n      return {\n        name: index,\n        key: key,\n        isListField: true\n      };\n    }), operations);\n  }));\n};\n\nexport default List;"]},"metadata":{},"sourceType":"module"}