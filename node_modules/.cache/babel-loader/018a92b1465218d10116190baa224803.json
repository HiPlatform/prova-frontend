{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { INTERNAL_COL_DEFINE } from '../utils/legacyUtil';\nexport function convertChildrenToColumns(children) {\n  return toArray(children).filter(function (node) {\n    return React.isValidElement(node);\n  }).map(function (_ref) {\n    var key = _ref.key,\n        props = _ref.props;\n\n    var nodeChildren = props.children,\n        restProps = _objectWithoutProperties(props, [\"children\"]);\n\n    var column = _objectSpread({\n      key: key\n    }, restProps);\n\n    if (nodeChildren) {\n      column.children = convertChildrenToColumns(nodeChildren);\n    }\n\n    return column;\n  });\n}\n\nfunction flatColumns(columns) {\n  return columns.reduce(function (list, column) {\n    var fixed = column.fixed; // Convert `fixed='true'` to `fixed='left'` instead\n\n    var parsedFixed = fixed === true ? 'left' : fixed;\n    var subColumns = column.children;\n\n    if (subColumns && subColumns.length > 0) {\n      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns).map(function (subColum) {\n        return _objectSpread({\n          fixed: parsedFixed\n        }, subColum);\n      })));\n    }\n\n    return [].concat(_toConsumableArray(list), [_objectSpread(_objectSpread({}, column), {}, {\n      fixed: parsedFixed\n    })]);\n  }, []);\n}\n\nfunction warningFixed(flattenColumns) {\n  var allFixLeft = true;\n\n  for (var i = 0; i < flattenColumns.length; i += 1) {\n    var col = flattenColumns[i];\n\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, \"Index \".concat(i - 1, \" of `columns` missing `fixed='left'` prop.\"));\n      break;\n    }\n  }\n\n  var allFixRight = true;\n\n  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {\n    var _col = flattenColumns[_i];\n\n    if (allFixRight && _col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && _col.fixed === 'right') {\n      warning(false, \"Index \".concat(_i + 1, \" of `columns` missing `fixed='right'` prop.\"));\n      break;\n    }\n  }\n}\n\nfunction revertForRtl(columns) {\n  return columns.map(function (column) {\n    var fixed = column.fixed,\n        restProps = _objectWithoutProperties(column, [\"fixed\"]); // Convert `fixed='left'` to `fixed='right'` instead\n\n\n    var parsedFixed = fixed;\n\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n\n    return _objectSpread({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n/**\n * Parse `columns` & `children` into `columns`.\n */\n\n\nfunction useColumns(_ref2, transformColumns) {\n  var prefixCls = _ref2.prefixCls,\n      columns = _ref2.columns,\n      children = _ref2.children,\n      expandable = _ref2.expandable,\n      expandedKeys = _ref2.expandedKeys,\n      getRowKey = _ref2.getRowKey,\n      onTriggerExpand = _ref2.onTriggerExpand,\n      expandIcon = _ref2.expandIcon,\n      rowExpandable = _ref2.rowExpandable,\n      expandIconColumnIndex = _ref2.expandIconColumnIndex,\n      direction = _ref2.direction,\n      expandRowByClick = _ref2.expandRowByClick;\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]); // Add expand column\n\n  var withExpandColumns = React.useMemo(function () {\n    if (expandable) {\n      var _expandColumn;\n\n      var expandColIndex = expandIconColumnIndex || 0;\n      var prevColumn = baseColumns[expandColIndex];\n      var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {\n        className: \"\".concat(prefixCls, \"-expand-icon-col\")\n      }), _defineProperty(_expandColumn, \"title\", ''), _defineProperty(_expandColumn, \"fixed\", prevColumn ? prevColumn.fixed : null), _defineProperty(_expandColumn, \"className\", \"\".concat(prefixCls, \"-row-expand-icon-cell\")), _defineProperty(_expandColumn, \"render\", function render(_, record, index) {\n        var rowKey = getRowKey(record, index);\n        var expanded = expandedKeys.has(rowKey);\n        var recordExpandable = rowExpandable ? rowExpandable(record) : true;\n        var icon = expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          expandable: recordExpandable,\n          record: record,\n          onExpand: onTriggerExpand\n        });\n\n        if (expandRowByClick) {\n          return React.createElement(\"span\", {\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            }\n          }, icon);\n        }\n\n        return icon;\n      }), _expandColumn); // Insert expand column in the target position\n\n      var cloneColumns = baseColumns.slice();\n\n      if (expandColIndex >= 0) {\n        cloneColumns.splice(expandColIndex, 0, expandColumn);\n      }\n\n      return cloneColumns;\n    }\n\n    return baseColumns;\n  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]);\n  var mergedColumns = React.useMemo(function () {\n    var finalColumns = withExpandColumns;\n\n    if (transformColumns) {\n      finalColumns = transformColumns(finalColumns);\n    } // Always provides at least one column for table display\n\n\n    if (!finalColumns.length) {\n      finalColumns = [{\n        render: function render() {\n          return null;\n        }\n      }];\n    }\n\n    return finalColumns;\n  }, [transformColumns, withExpandColumns, direction]);\n  var flattenColumns = React.useMemo(function () {\n    if (direction === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns));\n    }\n\n    return flatColumns(mergedColumns);\n  }, [mergedColumns, direction]); // Only check out of production since it's waste for each render\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningFixed(flattenColumns);\n  }\n\n  return [mergedColumns, flattenColumns];\n}\n\nexport default useColumns;","map":{"version":3,"sources":["/home/diegozago/Documents/hi-platform-test/node_modules/rc-table/es/hooks/useColumns.js"],"names":["_defineProperty","_toConsumableArray","_objectSpread","_objectWithoutProperties","React","warning","toArray","INTERNAL_COL_DEFINE","convertChildrenToColumns","children","filter","node","isValidElement","map","_ref","key","props","nodeChildren","restProps","column","flatColumns","columns","reduce","list","fixed","parsedFixed","subColumns","length","concat","subColum","warningFixed","flattenColumns","allFixLeft","i","col","allFixRight","_i","_col","revertForRtl","useColumns","_ref2","transformColumns","prefixCls","expandable","expandedKeys","getRowKey","onTriggerExpand","expandIcon","rowExpandable","expandIconColumnIndex","direction","expandRowByClick","baseColumns","useMemo","withExpandColumns","_expandColumn","expandColIndex","prevColumn","expandColumn","className","render","_","record","index","rowKey","expanded","has","recordExpandable","icon","onExpand","createElement","onClick","e","stopPropagation","cloneColumns","slice","splice","mergedColumns","finalColumns","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { INTERNAL_COL_DEFINE } from '../utils/legacyUtil';\nexport function convertChildrenToColumns(children) {\n  return toArray(children).filter(function (node) {\n    return React.isValidElement(node);\n  }).map(function (_ref) {\n    var key = _ref.key,\n        props = _ref.props;\n\n    var nodeChildren = props.children,\n        restProps = _objectWithoutProperties(props, [\"children\"]);\n\n    var column = _objectSpread({\n      key: key\n    }, restProps);\n\n    if (nodeChildren) {\n      column.children = convertChildrenToColumns(nodeChildren);\n    }\n\n    return column;\n  });\n}\n\nfunction flatColumns(columns) {\n  return columns.reduce(function (list, column) {\n    var fixed = column.fixed; // Convert `fixed='true'` to `fixed='left'` instead\n\n    var parsedFixed = fixed === true ? 'left' : fixed;\n    var subColumns = column.children;\n\n    if (subColumns && subColumns.length > 0) {\n      return [].concat(_toConsumableArray(list), _toConsumableArray(flatColumns(subColumns).map(function (subColum) {\n        return _objectSpread({\n          fixed: parsedFixed\n        }, subColum);\n      })));\n    }\n\n    return [].concat(_toConsumableArray(list), [_objectSpread(_objectSpread({}, column), {}, {\n      fixed: parsedFixed\n    })]);\n  }, []);\n}\n\nfunction warningFixed(flattenColumns) {\n  var allFixLeft = true;\n\n  for (var i = 0; i < flattenColumns.length; i += 1) {\n    var col = flattenColumns[i];\n\n    if (allFixLeft && col.fixed !== 'left') {\n      allFixLeft = false;\n    } else if (!allFixLeft && col.fixed === 'left') {\n      warning(false, \"Index \".concat(i - 1, \" of `columns` missing `fixed='left'` prop.\"));\n      break;\n    }\n  }\n\n  var allFixRight = true;\n\n  for (var _i = flattenColumns.length - 1; _i >= 0; _i -= 1) {\n    var _col = flattenColumns[_i];\n\n    if (allFixRight && _col.fixed !== 'right') {\n      allFixRight = false;\n    } else if (!allFixRight && _col.fixed === 'right') {\n      warning(false, \"Index \".concat(_i + 1, \" of `columns` missing `fixed='right'` prop.\"));\n      break;\n    }\n  }\n}\n\nfunction revertForRtl(columns) {\n  return columns.map(function (column) {\n    var fixed = column.fixed,\n        restProps = _objectWithoutProperties(column, [\"fixed\"]); // Convert `fixed='left'` to `fixed='right'` instead\n\n\n    var parsedFixed = fixed;\n\n    if (fixed === 'left') {\n      parsedFixed = 'right';\n    } else if (fixed === 'right') {\n      parsedFixed = 'left';\n    }\n\n    return _objectSpread({\n      fixed: parsedFixed\n    }, restProps);\n  });\n}\n/**\n * Parse `columns` & `children` into `columns`.\n */\n\n\nfunction useColumns(_ref2, transformColumns) {\n  var prefixCls = _ref2.prefixCls,\n      columns = _ref2.columns,\n      children = _ref2.children,\n      expandable = _ref2.expandable,\n      expandedKeys = _ref2.expandedKeys,\n      getRowKey = _ref2.getRowKey,\n      onTriggerExpand = _ref2.onTriggerExpand,\n      expandIcon = _ref2.expandIcon,\n      rowExpandable = _ref2.rowExpandable,\n      expandIconColumnIndex = _ref2.expandIconColumnIndex,\n      direction = _ref2.direction,\n      expandRowByClick = _ref2.expandRowByClick;\n  var baseColumns = React.useMemo(function () {\n    return columns || convertChildrenToColumns(children);\n  }, [columns, children]); // Add expand column\n\n  var withExpandColumns = React.useMemo(function () {\n    if (expandable) {\n      var _expandColumn;\n\n      var expandColIndex = expandIconColumnIndex || 0;\n      var prevColumn = baseColumns[expandColIndex];\n      var expandColumn = (_expandColumn = {}, _defineProperty(_expandColumn, INTERNAL_COL_DEFINE, {\n        className: \"\".concat(prefixCls, \"-expand-icon-col\")\n      }), _defineProperty(_expandColumn, \"title\", ''), _defineProperty(_expandColumn, \"fixed\", prevColumn ? prevColumn.fixed : null), _defineProperty(_expandColumn, \"className\", \"\".concat(prefixCls, \"-row-expand-icon-cell\")), _defineProperty(_expandColumn, \"render\", function render(_, record, index) {\n        var rowKey = getRowKey(record, index);\n        var expanded = expandedKeys.has(rowKey);\n        var recordExpandable = rowExpandable ? rowExpandable(record) : true;\n        var icon = expandIcon({\n          prefixCls: prefixCls,\n          expanded: expanded,\n          expandable: recordExpandable,\n          record: record,\n          onExpand: onTriggerExpand\n        });\n\n        if (expandRowByClick) {\n          return React.createElement(\"span\", {\n            onClick: function onClick(e) {\n              return e.stopPropagation();\n            }\n          }, icon);\n        }\n\n        return icon;\n      }), _expandColumn); // Insert expand column in the target position\n\n      var cloneColumns = baseColumns.slice();\n\n      if (expandColIndex >= 0) {\n        cloneColumns.splice(expandColIndex, 0, expandColumn);\n      }\n\n      return cloneColumns;\n    }\n\n    return baseColumns;\n  }, [expandable, baseColumns, getRowKey, expandedKeys, expandIcon, direction]);\n  var mergedColumns = React.useMemo(function () {\n    var finalColumns = withExpandColumns;\n\n    if (transformColumns) {\n      finalColumns = transformColumns(finalColumns);\n    } // Always provides at least one column for table display\n\n\n    if (!finalColumns.length) {\n      finalColumns = [{\n        render: function render() {\n          return null;\n        }\n      }];\n    }\n\n    return finalColumns;\n  }, [transformColumns, withExpandColumns, direction]);\n  var flattenColumns = React.useMemo(function () {\n    if (direction === 'rtl') {\n      return revertForRtl(flatColumns(mergedColumns));\n    }\n\n    return flatColumns(mergedColumns);\n  }, [mergedColumns, direction]); // Only check out of production since it's waste for each render\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningFixed(flattenColumns);\n  }\n\n  return [mergedColumns, flattenColumns];\n}\n\nexport default useColumns;"]},"metadata":{},"sourceType":"module"}