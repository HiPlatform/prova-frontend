{"ast":null,"code":"var _jsxFileName = \"/home/diegozago/Documents/hi-platform-test/src/components/TreeItem/TreeItem.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Checkbox } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronUp } from '@fortawesome/free-solid-svg-icons';\nimport TreeList from '../TreeList/TreeList';\nimport './TreeItem.scss';\n\nconst TreeItem = ({\n  item,\n  children,\n  child,\n  isChecked\n}) => {\n  const [collapsed, setCollapsed] = useState(false);\n  const [checked, setChecked] = useState(false);\n  useEffect(() => {\n    setChecked(isChecked);\n  }, [isChecked]);\n  useEffect(() => {\n    let expandeds = JSON.parse(localStorage.getItem('expanded')) || [];\n\n    if (collapsed) {\n      localStorage.setItem('expanded', [...expandeds, item.id]);\n    } else {\n      const items = expandeds.filter(id => id !== item.id);\n      localStorage.setItem('expanded', JSON.stringify(items));\n    }\n  }, [collapsed, item]);\n\n  const toggleCollapse = () => {\n    setCollapsed(val => !val);\n  };\n\n  const toggleChecked = () => setChecked(val => !val);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `tree-item-container ${child ? 'child-item' : ''} `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"item-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: toggleChecked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Checkbox, {\n    checked: checked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, item.name)), children.length > 0 && /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    onClick: toggleCollapse,\n    className: `icon ${collapsed && 'collapsed'}`,\n    icon: faChevronUp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: `item-body ${collapsed ? 'collapsed-item' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, collapsed && (children === null || children === void 0 ? void 0 : children.length) > 0 && /*#__PURE__*/React.createElement(TreeList, {\n    data: children,\n    checked: checked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default TreeItem;","map":{"version":3,"sources":["/home/diegozago/Documents/hi-platform-test/src/components/TreeItem/TreeItem.js"],"names":["React","useState","useEffect","Checkbox","FontAwesomeIcon","faChevronUp","TreeList","TreeItem","item","children","child","isChecked","collapsed","setCollapsed","checked","setChecked","expandeds","JSON","parse","localStorage","getItem","setItem","id","items","filter","stringify","toggleCollapse","val","toggleChecked","name","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Checkbox } from 'antd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronUp } from '@fortawesome/free-solid-svg-icons'\n\nimport TreeList from '../TreeList/TreeList'\n\nimport './TreeItem.scss'\n\nconst TreeItem = ({ \n  item, \n  children,\n  child,\n  isChecked\n}) => {\n  const [collapsed, setCollapsed] = useState(false)\n  const [checked, setChecked] = useState(false)\n\n  useEffect(() => {\n    setChecked(isChecked)\n  }, [isChecked])\n\n  useEffect(() => {\n    let expandeds = JSON.parse(localStorage.getItem('expanded')) || []\n    if (collapsed) {\n      localStorage.setItem('expanded', [...expandeds, item.id])\n    } else {\n      const items = expandeds.filter(id => id !== item.id)\n      localStorage.setItem('expanded', JSON.stringify(items))\n    }\n  }, [collapsed, item])\n\n  const toggleCollapse = () => {\n    setCollapsed((val) => !val)\n  }\n  const toggleChecked = () => setChecked((val) => !val)\n\n  return (\n    <div \n      className={`tree-item-container ${child ? 'child-item' : ''} `} \n    >\n      <div className=\"item-header\">\n        <div onClick={toggleChecked}>\n          <Checkbox checked={checked} />\n          <span>{item.name}</span>\n        </div>\n\n        {children.length > 0 && (\n          <FontAwesomeIcon \n            onClick={toggleCollapse} \n            className={`icon ${collapsed && 'collapsed'}`} icon={faChevronUp} \n          />\n        )}\n      </div>\n\n      <div className={`item-body ${collapsed ? 'collapsed-item' : ''}`}>\n        {collapsed && children?.length > 0 && (\n          <TreeList data={children} checked={checked} />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default TreeItem"]},"metadata":{},"sourceType":"module"}